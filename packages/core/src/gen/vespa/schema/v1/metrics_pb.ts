// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file vespa/schema/v1/metrics.proto (package vespa.schema.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Country } from "../../../hive/v1/enums_pb.js";

/**
 * @generated from message vespa.schema.v1.VespaNode
 */
export class VespaNode extends Message<VespaNode> {
  /**
   * @generated from field: string workload = 1;
   */
  workload = "";

  /**
   * @generated from field: string hub = 2;
   */
  hub = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: hive.v1.Country country = 4;
   */
  country = Country.UNSPECIFIED;

  constructor(data?: PartialMessage<VespaNode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.schema.v1.VespaNode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hub", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "country", kind: "enum", T: proto3.getEnumType(Country) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VespaNode {
    return new VespaNode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VespaNode {
    return new VespaNode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VespaNode {
    return new VespaNode().fromJsonString(jsonString, options);
  }

  static equals(a: VespaNode | PlainMessage<VespaNode> | undefined, b: VespaNode | PlainMessage<VespaNode> | undefined): boolean {
    return proto3.util.equals(VespaNode, a, b);
  }
}

