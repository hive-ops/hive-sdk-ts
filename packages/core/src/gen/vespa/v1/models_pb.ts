// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file vespa/v1/models.proto (package vespa.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ColumnType, ComparisonOperator } from "./enums_pb";

/**
 * @generated from message vespa.v1.ObjectRenameOptions
 */
export class ObjectRenameOptions extends Message<ObjectRenameOptions> {
  /**
   * @generated from field: string from = 1;
   */
  from = "";

  /**
   * @generated from field: string to = 2;
   */
  to = "";

  constructor(data?: PartialMessage<ObjectRenameOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.ObjectRenameOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectRenameOptions {
    return new ObjectRenameOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectRenameOptions {
    return new ObjectRenameOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectRenameOptions {
    return new ObjectRenameOptions().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectRenameOptions | PlainMessage<ObjectRenameOptions> | undefined, b: ObjectRenameOptions | PlainMessage<ObjectRenameOptions> | undefined): boolean {
    return proto3.util.equals(ObjectRenameOptions, a, b);
  }
}

/**
 * @generated from message vespa.v1.VespaError
 */
export class VespaError extends Message<VespaError> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<VespaError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.VespaError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VespaError {
    return new VespaError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VespaError {
    return new VespaError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VespaError {
    return new VespaError().fromJsonString(jsonString, options);
  }

  static equals(a: VespaError | PlainMessage<VespaError> | undefined, b: VespaError | PlainMessage<VespaError> | undefined): boolean {
    return proto3.util.equals(VespaError, a, b);
  }
}

/**
 * @generated from message vespa.v1.ColumnMetadata
 */
export class ColumnMetadata extends Message<ColumnMetadata> {
  /**
   * @generated from field: string ref = 1;
   */
  ref = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: vespa.v1.ColumnType type = 3;
   */
  type = ColumnType.UNSPECIFIED;

  /**
   * @generated from field: bool nullable = 4;
   */
  nullable = false;

  /**
   * bool       auto_increment    = 5;
   * bool   unique            = 6;
   * uint32 primary_key_index = 7;
   *
   * @generated from field: string default = 8;
   */
  default = "";

  constructor(data?: PartialMessage<ColumnMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.ColumnMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(ColumnType) },
    { no: 4, name: "nullable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "default", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnMetadata {
    return new ColumnMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnMetadata {
    return new ColumnMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnMetadata {
    return new ColumnMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnMetadata | PlainMessage<ColumnMetadata> | undefined, b: ColumnMetadata | PlainMessage<ColumnMetadata> | undefined): boolean {
    return proto3.util.equals(ColumnMetadata, a, b);
  }
}

/**
 * @generated from message vespa.v1.IndexMetadata
 */
export class IndexMetadata extends Message<IndexMetadata> {
  /**
   * bool            unique  = 1;
   *
   * @generated from field: repeated string columns = 2;
   */
  columns: string[] = [];

  constructor(data?: PartialMessage<IndexMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.IndexMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "columns", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexMetadata {
    return new IndexMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexMetadata {
    return new IndexMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexMetadata {
    return new IndexMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: IndexMetadata | PlainMessage<IndexMetadata> | undefined, b: IndexMetadata | PlainMessage<IndexMetadata> | undefined): boolean {
    return proto3.util.equals(IndexMetadata, a, b);
  }
}

/**
 * @generated from message vespa.v1.TableMetadata
 */
export class TableMetadata extends Message<TableMetadata> {
  /**
   * @generated from field: string ref = 4;
   */
  ref = "";

  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated vespa.v1.ColumnMetadata columns = 2;
   */
  columns: ColumnMetadata[] = [];

  /**
   * @generated from field: repeated vespa.v1.IndexMetadata indexes = 3;
   */
  indexes: IndexMetadata[] = [];

  constructor(data?: PartialMessage<TableMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.TableMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "columns", kind: "message", T: ColumnMetadata, repeated: true },
    { no: 3, name: "indexes", kind: "message", T: IndexMetadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableMetadata {
    return new TableMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableMetadata {
    return new TableMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableMetadata {
    return new TableMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: TableMetadata | PlainMessage<TableMetadata> | undefined, b: TableMetadata | PlainMessage<TableMetadata> | undefined): boolean {
    return proto3.util.equals(TableMetadata, a, b);
  }
}

/**
 * @generated from message vespa.v1.VespaNode
 */
export class VespaNode extends Message<VespaNode> {
  /**
   * @generated from field: string workload = 1;
   */
  workload = "";

  /**
   * @generated from field: string hub = 2;
   */
  hub = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string country_code = 4;
   */
  countryCode = "";

  /**
   * @generated from field: string hub_id = 5;
   */
  hubId = "";

  constructor(data?: PartialMessage<VespaNode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.VespaNode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hub", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "country_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "hub_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VespaNode {
    return new VespaNode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VespaNode {
    return new VespaNode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VespaNode {
    return new VespaNode().fromJsonString(jsonString, options);
  }

  static equals(a: VespaNode | PlainMessage<VespaNode> | undefined, b: VespaNode | PlainMessage<VespaNode> | undefined): boolean {
    return proto3.util.equals(VespaNode, a, b);
  }
}

/**
 * @generated from message vespa.v1.DatabaseSchema
 */
export class DatabaseSchema extends Message<DatabaseSchema> {
  /**
   * @generated from field: uint64 index = 1;
   */
  index = protoInt64.zero;

  /**
   * @generated from field: repeated vespa.v1.TableMetadata tables = 2;
   */
  tables: TableMetadata[] = [];

  constructor(data?: PartialMessage<DatabaseSchema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.DatabaseSchema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "tables", kind: "message", T: TableMetadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabaseSchema {
    return new DatabaseSchema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabaseSchema {
    return new DatabaseSchema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabaseSchema {
    return new DatabaseSchema().fromJsonString(jsonString, options);
  }

  static equals(a: DatabaseSchema | PlainMessage<DatabaseSchema> | undefined, b: DatabaseSchema | PlainMessage<DatabaseSchema> | undefined): boolean {
    return proto3.util.equals(DatabaseSchema, a, b);
  }
}

/**
 * @generated from message vespa.v1.RenameColumn
 */
export class RenameColumn extends Message<RenameColumn> {
  /**
   * @generated from field: vespa.v1.ColumnMetadata column = 1 [deprecated = true];
   * @deprecated
   */
  column?: ColumnMetadata;

  /**
   * @generated from field: string new_name = 2;
   */
  newName = "";

  /**
   * @generated from field: string old_name = 3;
   */
  oldName = "";

  /**
   * @generated from field: string ref = 4;
   */
  ref = "";

  constructor(data?: PartialMessage<RenameColumn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.RenameColumn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "column", kind: "message", T: ColumnMetadata },
    { no: 2, name: "new_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "old_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameColumn {
    return new RenameColumn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameColumn {
    return new RenameColumn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameColumn {
    return new RenameColumn().fromJsonString(jsonString, options);
  }

  static equals(a: RenameColumn | PlainMessage<RenameColumn> | undefined, b: RenameColumn | PlainMessage<RenameColumn> | undefined): boolean {
    return proto3.util.equals(RenameColumn, a, b);
  }
}

/**
 * @generated from message vespa.v1.RenameTable
 */
export class RenameTable extends Message<RenameTable> {
  /**
   * @generated from field: vespa.v1.ObjectRenameOptions options = 1;
   */
  options?: ObjectRenameOptions;

  constructor(data?: PartialMessage<RenameTable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.RenameTable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "options", kind: "message", T: ObjectRenameOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameTable {
    return new RenameTable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameTable {
    return new RenameTable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameTable {
    return new RenameTable().fromJsonString(jsonString, options);
  }

  static equals(a: RenameTable | PlainMessage<RenameTable> | undefined, b: RenameTable | PlainMessage<RenameTable> | undefined): boolean {
    return proto3.util.equals(RenameTable, a, b);
  }
}

/**
 * @generated from message vespa.v1.RefAndName
 */
export class RefAndName extends Message<RefAndName> {
  /**
   * @generated from field: string ref = 1;
   */
  ref = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<RefAndName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.RefAndName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefAndName {
    return new RefAndName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefAndName {
    return new RefAndName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefAndName {
    return new RefAndName().fromJsonString(jsonString, options);
  }

  static equals(a: RefAndName | PlainMessage<RefAndName> | undefined, b: RefAndName | PlainMessage<RefAndName> | undefined): boolean {
    return proto3.util.equals(RefAndName, a, b);
  }
}

/**
 * @generated from message vespa.v1.AlterTable
 */
export class AlterTable extends Message<AlterTable> {
  /**
   * @generated from field: string table_name = 1;
   */
  tableName = "";

  /**
   * @generated from field: repeated vespa.v1.ColumnMetadata create_columns = 2;
   */
  createColumns: ColumnMetadata[] = [];

  /**
   * @generated from field: repeated vespa.v1.RenameColumn rename_columns = 3;
   */
  renameColumns: RenameColumn[] = [];

  /**
   * @generated from field: repeated vespa.v1.RefAndName drop_columns = 4;
   */
  dropColumns: RefAndName[] = [];

  /**
   * @generated from field: repeated vespa.v1.IndexMetadata create_indexes = 5;
   */
  createIndexes: IndexMetadata[] = [];

  /**
   * @generated from field: repeated vespa.v1.IndexMetadata drop_indexes = 6;
   */
  dropIndexes: IndexMetadata[] = [];

  constructor(data?: PartialMessage<AlterTable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.AlterTable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "create_columns", kind: "message", T: ColumnMetadata, repeated: true },
    { no: 3, name: "rename_columns", kind: "message", T: RenameColumn, repeated: true },
    { no: 4, name: "drop_columns", kind: "message", T: RefAndName, repeated: true },
    { no: 5, name: "create_indexes", kind: "message", T: IndexMetadata, repeated: true },
    { no: 6, name: "drop_indexes", kind: "message", T: IndexMetadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlterTable {
    return new AlterTable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlterTable {
    return new AlterTable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlterTable {
    return new AlterTable().fromJsonString(jsonString, options);
  }

  static equals(a: AlterTable | PlainMessage<AlterTable> | undefined, b: AlterTable | PlainMessage<AlterTable> | undefined): boolean {
    return proto3.util.equals(AlterTable, a, b);
  }
}

/**
 * @generated from message vespa.v1.Migration
 */
export class Migration extends Message<Migration> {
  /**
   * @generated from field: repeated vespa.v1.TableMetadata create_tables = 1;
   */
  createTables: TableMetadata[] = [];

  /**
   * @generated from field: repeated vespa.v1.RenameTable rename_tables = 2;
   */
  renameTables: RenameTable[] = [];

  /**
   * @generated from field: repeated vespa.v1.RefAndName drop_tables = 3;
   */
  dropTables: RefAndName[] = [];

  /**
   * @generated from field: repeated vespa.v1.AlterTable alter_tables = 4;
   */
  alterTables: AlterTable[] = [];

  constructor(data?: PartialMessage<Migration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.Migration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "create_tables", kind: "message", T: TableMetadata, repeated: true },
    { no: 2, name: "rename_tables", kind: "message", T: RenameTable, repeated: true },
    { no: 3, name: "drop_tables", kind: "message", T: RefAndName, repeated: true },
    { no: 4, name: "alter_tables", kind: "message", T: AlterTable, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Migration {
    return new Migration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Migration {
    return new Migration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Migration {
    return new Migration().fromJsonString(jsonString, options);
  }

  static equals(a: Migration | PlainMessage<Migration> | undefined, b: Migration | PlainMessage<Migration> | undefined): boolean {
    return proto3.util.equals(Migration, a, b);
  }
}

/**
 * @generated from message vespa.v1.FieldValue
 */
export class FieldValue extends Message<FieldValue> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * true if the corresponding value is nil, null, empty, not set, undefined, etc.
   *
   * @generated from field: bool is_nil = 2;
   */
  isNil = false;

  constructor(data?: PartialMessage<FieldValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.FieldValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_nil", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FieldValue {
    return new FieldValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FieldValue {
    return new FieldValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FieldValue {
    return new FieldValue().fromJsonString(jsonString, options);
  }

  static equals(a: FieldValue | PlainMessage<FieldValue> | undefined, b: FieldValue | PlainMessage<FieldValue> | undefined): boolean {
    return proto3.util.equals(FieldValue, a, b);
  }
}

/**
 * @generated from message vespa.v1.Record
 */
export class Record extends Message<Record> {
  /**
   * @generated from field: map<string, vespa.v1.FieldValue> record = 1;
   */
  record: { [key: string]: FieldValue } = {};

  constructor(data?: PartialMessage<Record>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.Record";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: FieldValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Record {
    return new Record().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Record {
    return new Record().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Record {
    return new Record().fromJsonString(jsonString, options);
  }

  static equals(a: Record | PlainMessage<Record> | undefined, b: Record | PlainMessage<Record> | undefined): boolean {
    return proto3.util.equals(Record, a, b);
  }
}

/**
 * @generated from message vespa.v1.WhereValue
 */
export class WhereValue extends Message<WhereValue> {
  /**
   * @generated from field: vespa.v1.ColumnType type = 1;
   */
  type = ColumnType.UNSPECIFIED;

  /**
   * @generated from field: bool is_array = 2;
   */
  isArray = false;

  /**
   * @generated from field: bool is_null = 3;
   */
  isNull = false;

  /**
   * @generated from field: string data = 4;
   */
  data = "";

  constructor(data?: PartialMessage<WhereValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.WhereValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(ColumnType) },
    { no: 2, name: "is_array", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "is_null", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhereValue {
    return new WhereValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhereValue {
    return new WhereValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhereValue {
    return new WhereValue().fromJsonString(jsonString, options);
  }

  static equals(a: WhereValue | PlainMessage<WhereValue> | undefined, b: WhereValue | PlainMessage<WhereValue> | undefined): boolean {
    return proto3.util.equals(WhereValue, a, b);
  }
}

/**
 * @generated from message vespa.v1.WhereCondition
 */
export class WhereCondition extends Message<WhereCondition> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: vespa.v1.ComparisonOperator operator = 2;
   */
  operator = ComparisonOperator.UNSPECIFIED;

  /**
   * map<string, WhereValue> entries = 4;
   *
   * @generated from field: vespa.v1.WhereValue value = 3;
   */
  value?: WhereValue;

  constructor(data?: PartialMessage<WhereCondition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.WhereCondition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator", kind: "enum", T: proto3.getEnumType(ComparisonOperator) },
    { no: 3, name: "value", kind: "message", T: WhereValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhereCondition {
    return new WhereCondition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhereCondition {
    return new WhereCondition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhereCondition {
    return new WhereCondition().fromJsonString(jsonString, options);
  }

  static equals(a: WhereCondition | PlainMessage<WhereCondition> | undefined, b: WhereCondition | PlainMessage<WhereCondition> | undefined): boolean {
    return proto3.util.equals(WhereCondition, a, b);
  }
}

