// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file vespa/v1/data_models.proto (package vespa.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ColumnType, ComparisonOperator } from "./enums_pb";

/**
 * @generated from message vespa.v1.FieldValue
 */
export class FieldValue extends Message<FieldValue> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * true if the corresponding value is nil, null, empty, not set, undefined, etc.
   *
   * @generated from field: bool is_nil = 2;
   */
  isNil = false;

  constructor(data?: PartialMessage<FieldValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.FieldValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_nil", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FieldValue {
    return new FieldValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FieldValue {
    return new FieldValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FieldValue {
    return new FieldValue().fromJsonString(jsonString, options);
  }

  static equals(a: FieldValue | PlainMessage<FieldValue> | undefined, b: FieldValue | PlainMessage<FieldValue> | undefined): boolean {
    return proto3.util.equals(FieldValue, a, b);
  }
}

/**
 * @generated from message vespa.v1.Record
 */
export class Record extends Message<Record> {
  /**
   * @generated from field: map<string, vespa.v1.FieldValue> record = 1;
   */
  record: { [key: string]: FieldValue } = {};

  constructor(data?: PartialMessage<Record>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.Record";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: FieldValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Record {
    return new Record().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Record {
    return new Record().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Record {
    return new Record().fromJsonString(jsonString, options);
  }

  static equals(a: Record | PlainMessage<Record> | undefined, b: Record | PlainMessage<Record> | undefined): boolean {
    return proto3.util.equals(Record, a, b);
  }
}

/**
 * @generated from message vespa.v1.WhereValue
 */
export class WhereValue extends Message<WhereValue> {
  /**
   * @generated from field: vespa.v1.ColumnType type = 1;
   */
  type = ColumnType.UNSPECIFIED;

  /**
   * @generated from field: bool is_array = 2;
   */
  isArray = false;

  /**
   * @generated from field: bool is_null = 3;
   */
  isNull = false;

  /**
   * @generated from field: string data = 4;
   */
  data = "";

  constructor(data?: PartialMessage<WhereValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.WhereValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(ColumnType) },
    { no: 2, name: "is_array", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "is_null", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhereValue {
    return new WhereValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhereValue {
    return new WhereValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhereValue {
    return new WhereValue().fromJsonString(jsonString, options);
  }

  static equals(a: WhereValue | PlainMessage<WhereValue> | undefined, b: WhereValue | PlainMessage<WhereValue> | undefined): boolean {
    return proto3.util.equals(WhereValue, a, b);
  }
}

/**
 * @generated from message vespa.v1.WhereCondition
 */
export class WhereCondition extends Message<WhereCondition> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: vespa.v1.ComparisonOperator operator = 2;
   */
  operator = ComparisonOperator.UNSPECIFIED;

  /**
   * map<string, WhereValue> entries = 4;
   *
   * @generated from field: vespa.v1.WhereValue value = 3;
   */
  value?: WhereValue;

  constructor(data?: PartialMessage<WhereCondition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.WhereCondition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator", kind: "enum", T: proto3.getEnumType(ComparisonOperator) },
    { no: 3, name: "value", kind: "message", T: WhereValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhereCondition {
    return new WhereCondition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhereCondition {
    return new WhereCondition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhereCondition {
    return new WhereCondition().fromJsonString(jsonString, options);
  }

  static equals(a: WhereCondition | PlainMessage<WhereCondition> | undefined, b: WhereCondition | PlainMessage<WhereCondition> | undefined): boolean {
    return proto3.util.equals(WhereCondition, a, b);
  }
}

