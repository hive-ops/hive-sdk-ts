// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file vespa/v1/migrations.proto (package vespa.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ColumnMetadata, IndexMetadata, ObjectRenameOptions, TableMetadata } from "./schema_models_pb";

/**
 * @generated from message vespa.v1.RenameColumn
 */
export class RenameColumn extends Message<RenameColumn> {
  /**
   * @generated from field: vespa.v1.ColumnMetadata column = 1 [deprecated = true];
   * @deprecated
   */
  column?: ColumnMetadata;

  /**
   * @generated from field: string new_name = 2;
   */
  newName = "";

  /**
   * @generated from field: string old_name = 3;
   */
  oldName = "";

  /**
   * @generated from field: string ref = 4;
   */
  ref = "";

  constructor(data?: PartialMessage<RenameColumn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.RenameColumn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "column", kind: "message", T: ColumnMetadata },
    { no: 2, name: "new_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "old_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameColumn {
    return new RenameColumn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameColumn {
    return new RenameColumn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameColumn {
    return new RenameColumn().fromJsonString(jsonString, options);
  }

  static equals(a: RenameColumn | PlainMessage<RenameColumn> | undefined, b: RenameColumn | PlainMessage<RenameColumn> | undefined): boolean {
    return proto3.util.equals(RenameColumn, a, b);
  }
}

/**
 * @generated from message vespa.v1.RenameTable
 */
export class RenameTable extends Message<RenameTable> {
  /**
   * @generated from field: vespa.v1.ObjectRenameOptions options = 1;
   */
  options?: ObjectRenameOptions;

  constructor(data?: PartialMessage<RenameTable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.RenameTable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "options", kind: "message", T: ObjectRenameOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameTable {
    return new RenameTable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameTable {
    return new RenameTable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameTable {
    return new RenameTable().fromJsonString(jsonString, options);
  }

  static equals(a: RenameTable | PlainMessage<RenameTable> | undefined, b: RenameTable | PlainMessage<RenameTable> | undefined): boolean {
    return proto3.util.equals(RenameTable, a, b);
  }
}

/**
 * @generated from message vespa.v1.RefAndName
 */
export class RefAndName extends Message<RefAndName> {
  /**
   * @generated from field: string ref = 1;
   */
  ref = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<RefAndName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.RefAndName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefAndName {
    return new RefAndName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefAndName {
    return new RefAndName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefAndName {
    return new RefAndName().fromJsonString(jsonString, options);
  }

  static equals(a: RefAndName | PlainMessage<RefAndName> | undefined, b: RefAndName | PlainMessage<RefAndName> | undefined): boolean {
    return proto3.util.equals(RefAndName, a, b);
  }
}

/**
 * @generated from message vespa.v1.AlterTable
 */
export class AlterTable extends Message<AlterTable> {
  /**
   * @generated from field: string table_name = 1;
   */
  tableName = "";

  /**
   * @generated from field: repeated vespa.v1.ColumnMetadata create_columns = 2;
   */
  createColumns: ColumnMetadata[] = [];

  /**
   * @generated from field: repeated vespa.v1.RenameColumn rename_columns = 3;
   */
  renameColumns: RenameColumn[] = [];

  /**
   * @generated from field: repeated vespa.v1.RefAndName drop_columns = 4;
   */
  dropColumns: RefAndName[] = [];

  /**
   * @generated from field: repeated vespa.v1.IndexMetadata create_indexes = 5;
   */
  createIndexes: IndexMetadata[] = [];

  /**
   * @generated from field: repeated vespa.v1.IndexMetadata drop_indexes = 6;
   */
  dropIndexes: IndexMetadata[] = [];

  constructor(data?: PartialMessage<AlterTable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.AlterTable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "create_columns", kind: "message", T: ColumnMetadata, repeated: true },
    { no: 3, name: "rename_columns", kind: "message", T: RenameColumn, repeated: true },
    { no: 4, name: "drop_columns", kind: "message", T: RefAndName, repeated: true },
    { no: 5, name: "create_indexes", kind: "message", T: IndexMetadata, repeated: true },
    { no: 6, name: "drop_indexes", kind: "message", T: IndexMetadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlterTable {
    return new AlterTable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlterTable {
    return new AlterTable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlterTable {
    return new AlterTable().fromJsonString(jsonString, options);
  }

  static equals(a: AlterTable | PlainMessage<AlterTable> | undefined, b: AlterTable | PlainMessage<AlterTable> | undefined): boolean {
    return proto3.util.equals(AlterTable, a, b);
  }
}

/**
 * @generated from message vespa.v1.Migration
 */
export class Migration extends Message<Migration> {
  /**
   * @generated from field: repeated vespa.v1.TableMetadata create_tables = 1;
   */
  createTables: TableMetadata[] = [];

  /**
   * @generated from field: repeated vespa.v1.RenameTable rename_tables = 2;
   */
  renameTables: RenameTable[] = [];

  /**
   * @generated from field: repeated vespa.v1.RefAndName drop_tables = 3;
   */
  dropTables: RefAndName[] = [];

  /**
   * @generated from field: repeated vespa.v1.AlterTable alter_tables = 4;
   */
  alterTables: AlterTable[] = [];

  constructor(data?: PartialMessage<Migration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vespa.v1.Migration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "create_tables", kind: "message", T: TableMetadata, repeated: true },
    { no: 2, name: "rename_tables", kind: "message", T: RenameTable, repeated: true },
    { no: 3, name: "drop_tables", kind: "message", T: RefAndName, repeated: true },
    { no: 4, name: "alter_tables", kind: "message", T: AlterTable, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Migration {
    return new Migration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Migration {
    return new Migration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Migration {
    return new Migration().fromJsonString(jsonString, options);
  }

  static equals(a: Migration | PlainMessage<Migration> | undefined, b: Migration | PlainMessage<Migration> | undefined): boolean {
    return proto3.util.equals(Migration, a, b);
  }
}

