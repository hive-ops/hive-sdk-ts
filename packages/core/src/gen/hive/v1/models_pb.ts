// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file hive/v1/models.proto (package hive.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Framework, Service } from "./enums_pb.js";

/**
 * @generated from message hive.v1.FQDN
 */
export class FQDN extends Message<FQDN> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * @generated from field: string workload = 2;
   */
  workload = "";

  /**
   * @generated from field: string hub = 3;
   */
  hub = "";

  /**
   * @generated from field: hive.v1.Service service = 4;
   */
  service = Service.UNSPECIFIED;

  /**
   * @generated from field: string node = 5;
   */
  node = "";

  /**
   * @generated from field: hive.v1.Framework framework = 6;
   */
  framework = Framework.UNSPECIFIED;

  constructor(data?: PartialMessage<FQDN>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hive.v1.FQDN";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "hub", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "service", kind: "enum", T: proto3.getEnumType(Service) },
    { no: 5, name: "node", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "framework", kind: "enum", T: proto3.getEnumType(Framework) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FQDN {
    return new FQDN().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FQDN {
    return new FQDN().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FQDN {
    return new FQDN().fromJsonString(jsonString, options);
  }

  static equals(a: FQDN | PlainMessage<FQDN> | undefined, b: FQDN | PlainMessage<FQDN> | undefined): boolean {
    return proto3.util.equals(FQDN, a, b);
  }
}

