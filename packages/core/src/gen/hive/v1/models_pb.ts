// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file hive/v1/models.proto (package hive.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { App, BasePort, Environment, ErrorCode, Resource, Verb } from "./enums_pb";

/**
 * @generated from message hive.v1.Error
 */
export class Error extends Message<Error> {
  /**
   * @generated from field: hive.v1.ErrorCode code = 1;
   */
  code = ErrorCode.UNSPECIFIED;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<Error>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hive.v1.Error";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "enum", T: proto3.getEnumType(ErrorCode) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Error {
    return new Error().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJsonString(jsonString, options);
  }

  static equals(a: Error | PlainMessage<Error> | undefined, b: Error | PlainMessage<Error> | undefined): boolean {
    return proto3.util.equals(Error, a, b);
  }
}

/**
 * @generated from message hive.v1.PaginationRequest
 */
export class PaginationRequest extends Message<PaginationRequest> {
  /**
   * @generated from field: int32 page_index = 1;
   */
  pageIndex = 0;

  /**
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<PaginationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hive.v1.PaginationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaginationRequest {
    return new PaginationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaginationRequest {
    return new PaginationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaginationRequest {
    return new PaginationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaginationRequest | PlainMessage<PaginationRequest> | undefined, b: PaginationRequest | PlainMessage<PaginationRequest> | undefined): boolean {
    return proto3.util.equals(PaginationRequest, a, b);
  }
}

/**
 * @generated from message hive.v1.Pagination
 */
export class Pagination extends Message<Pagination> {
  /**
   * @generated from field: int32 current_page = 1;
   */
  currentPage = 0;

  /**
   * @generated from field: int32 total_pages = 2;
   */
  totalPages = 0;

  /**
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: int32 total_items = 4;
   */
  totalItems = 0;

  constructor(data?: PartialMessage<Pagination>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hive.v1.Pagination";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "total_pages", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "total_items", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pagination {
    return new Pagination().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pagination {
    return new Pagination().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pagination {
    return new Pagination().fromJsonString(jsonString, options);
  }

  static equals(a: Pagination | PlainMessage<Pagination> | undefined, b: Pagination | PlainMessage<Pagination> | undefined): boolean {
    return proto3.util.equals(Pagination, a, b);
  }
}

/**
 * @generated from message hive.v1.ResponseMetadata
 */
export class ResponseMetadata extends Message<ResponseMetadata> {
  /**
   * @generated from field: bool successful = 1;
   */
  successful = false;

  /**
   * @generated from field: repeated hive.v1.Error errors = 2;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<ResponseMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hive.v1.ResponseMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "successful", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseMetadata {
    return new ResponseMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseMetadata {
    return new ResponseMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseMetadata {
    return new ResponseMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseMetadata | PlainMessage<ResponseMetadata> | undefined, b: ResponseMetadata | PlainMessage<ResponseMetadata> | undefined): boolean {
    return proto3.util.equals(ResponseMetadata, a, b);
  }
}

/**
 * @generated from message hive.v1.File
 */
export class File extends Message<File> {
  /**
   * @generated from field: repeated string directory_path_elements = 1;
   */
  directoryPathElements: string[] = [];

  /**
   * @generated from field: string file_name = 2;
   */
  fileName = "";

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  /**
   * @generated from field: string header_comment = 4;
   */
  headerComment = "";

  constructor(data?: PartialMessage<File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hive.v1.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "directory_path_elements", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "header_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): File {
    return new File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): File {
    return new File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): File {
    return new File().fromJsonString(jsonString, options);
  }

  static equals(a: File | PlainMessage<File> | undefined, b: File | PlainMessage<File> | undefined): boolean {
    return proto3.util.equals(File, a, b);
  }
}

/**
 * @generated from message hive.v1.HivePermission
 */
export class HivePermission extends Message<HivePermission> {
  /**
   * @generated from field: hive.v1.Resource resource = 1;
   */
  resource = Resource.UNSPECIFIED;

  /**
   * @generated from field: repeated hive.v1.Verb verbs = 2;
   */
  verbs: Verb[] = [];

  constructor(data?: PartialMessage<HivePermission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hive.v1.HivePermission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "enum", T: proto3.getEnumType(Resource) },
    { no: 2, name: "verbs", kind: "enum", T: proto3.getEnumType(Verb), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HivePermission {
    return new HivePermission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HivePermission {
    return new HivePermission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HivePermission {
    return new HivePermission().fromJsonString(jsonString, options);
  }

  static equals(a: HivePermission | PlainMessage<HivePermission> | undefined, b: HivePermission | PlainMessage<HivePermission> | undefined): boolean {
    return proto3.util.equals(HivePermission, a, b);
  }
}

/**
 * @generated from message hive.v1.FQDN
 */
export class FQDN extends Message<FQDN> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * @generated from field: string hub_id = 2;
   */
  hubId = "";

  /**
   * @generated from field: hive.v1.Environment environment = 3;
   */
  environment = Environment.UNSPECIFIED;

  /**
   * @generated from field: hive.v1.App app = 4;
   */
  app = App.UNSPECIFIED;

  /**
   * @generated from field: hive.v1.BasePort base_port = 5;
   */
  basePort = BasePort.UNSPECIFIED;

  /**
   * This is only applicable to vespa nodes
   *
   * @generated from field: string node_name = 6;
   */
  nodeName = "";

  constructor(data?: PartialMessage<FQDN>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hive.v1.FQDN";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hub_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment", kind: "enum", T: proto3.getEnumType(Environment) },
    { no: 4, name: "app", kind: "enum", T: proto3.getEnumType(App) },
    { no: 5, name: "base_port", kind: "enum", T: proto3.getEnumType(BasePort) },
    { no: 6, name: "node_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FQDN {
    return new FQDN().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FQDN {
    return new FQDN().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FQDN {
    return new FQDN().fromJsonString(jsonString, options);
  }

  static equals(a: FQDN | PlainMessage<FQDN> | undefined, b: FQDN | PlainMessage<FQDN> | undefined): boolean {
    return proto3.util.equals(FQDN, a, b);
  }
}

