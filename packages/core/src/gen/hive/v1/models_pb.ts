// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file hive/v1/models.proto (package hive.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ErrorCode, Framework, Resource, Service, Verb } from "./enums_pb.js";

/**
 * @generated from message hive.v1.Error
 */
export class Error extends Message<Error> {
  /**
   * @generated from field: hive.v1.ErrorCode code = 1;
   */
  code = ErrorCode.UNSPECIFIED;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<Error>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hive.v1.Error";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "enum", T: proto3.getEnumType(ErrorCode) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Error {
    return new Error().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJsonString(jsonString, options);
  }

  static equals(a: Error | PlainMessage<Error> | undefined, b: Error | PlainMessage<Error> | undefined): boolean {
    return proto3.util.equals(Error, a, b);
  }
}

/**
 * @generated from message hive.v1.ValidationError
 */
export class ValidationError extends Message<ValidationError> {
  /**
   * @generated from field: repeated hive.v1.Error errors = 1;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<ValidationError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hive.v1.ValidationError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidationError {
    return new ValidationError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidationError {
    return new ValidationError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidationError {
    return new ValidationError().fromJsonString(jsonString, options);
  }

  static equals(a: ValidationError | PlainMessage<ValidationError> | undefined, b: ValidationError | PlainMessage<ValidationError> | undefined): boolean {
    return proto3.util.equals(ValidationError, a, b);
  }
}

/**
 * @generated from message hive.v1.ResponseMetadata
 */
export class ResponseMetadata extends Message<ResponseMetadata> {
  /**
   * @generated from field: bool successful = 1;
   */
  successful = false;

  /**
   * @generated from field: repeated hive.v1.Error errors = 2;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<ResponseMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hive.v1.ResponseMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "successful", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseMetadata {
    return new ResponseMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseMetadata {
    return new ResponseMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseMetadata {
    return new ResponseMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseMetadata | PlainMessage<ResponseMetadata> | undefined, b: ResponseMetadata | PlainMessage<ResponseMetadata> | undefined): boolean {
    return proto3.util.equals(ResponseMetadata, a, b);
  }
}

/**
 * @generated from message hive.v1.HivePermission
 */
export class HivePermission extends Message<HivePermission> {
  /**
   * @generated from field: hive.v1.Resource resource = 1;
   */
  resource = Resource.UNSPECIFIED;

  /**
   * @generated from field: repeated hive.v1.Verb verbs = 2;
   */
  verbs: Verb[] = [];

  constructor(data?: PartialMessage<HivePermission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hive.v1.HivePermission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "enum", T: proto3.getEnumType(Resource) },
    { no: 2, name: "verbs", kind: "enum", T: proto3.getEnumType(Verb), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HivePermission {
    return new HivePermission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HivePermission {
    return new HivePermission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HivePermission {
    return new HivePermission().fromJsonString(jsonString, options);
  }

  static equals(a: HivePermission | PlainMessage<HivePermission> | undefined, b: HivePermission | PlainMessage<HivePermission> | undefined): boolean {
    return proto3.util.equals(HivePermission, a, b);
  }
}

/**
 * @generated from message hive.v1.FQDN
 */
export class FQDN extends Message<FQDN> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * @generated from field: string workload = 2;
   */
  workload = "";

  /**
   * @generated from field: string hub = 3;
   */
  hub = "";

  /**
   * @generated from field: hive.v1.Service service = 4;
   */
  service = Service.UNSPECIFIED;

  /**
   * @generated from field: string node = 5;
   */
  node = "";

  /**
   * @generated from field: hive.v1.Framework framework = 6;
   */
  framework = Framework.UNSPECIFIED;

  constructor(data?: PartialMessage<FQDN>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hive.v1.FQDN";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "hub", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "service", kind: "enum", T: proto3.getEnumType(Service) },
    { no: 5, name: "node", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "framework", kind: "enum", T: proto3.getEnumType(Framework) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FQDN {
    return new FQDN().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FQDN {
    return new FQDN().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FQDN {
    return new FQDN().fromJsonString(jsonString, options);
  }

  static equals(a: FQDN | PlainMessage<FQDN> | undefined, b: FQDN | PlainMessage<FQDN> | undefined): boolean {
    return proto3.util.equals(FQDN, a, b);
  }
}

