// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file beekeeper/v1/enums.proto (package beekeeper.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { EnumValueOptions, proto3 } from "@bufbuild/protobuf";

/**
 * *
 * This is the status of the Database Stack in the Vespa cluster. It can be
 * either:
 *
 * - Submitted: This is set by the orchestrator when a new database stack is
 * created but not yet assigned to a node
 * - Setting Up: This is set by the node when it has accepted the database stack
 * and is setting up the database stack
 * - Healthy: This is set by the node when the database stack is healthy and
 * ready to be used
 * - Degraded: This is set by the orchestrator when the node is not reachable
 * - Inactive: This is set by the orchestrator when the database stack is not
 * reachable
 *
 * @generated from enum beekeeper.v1.VespaDatabaseStackStatus
 */
export enum VespaDatabaseStackStatus {
  /**
   * @generated from enum value: VESPA_DATABASE_STACK_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: VESPA_DATABASE_STACK_STATUS_SUBMITTED = 1;
   */
  SUBMITTED = 1,

  /**
   * @generated from enum value: VESPA_DATABASE_STACK_STATUS_SETTING_UP = 2;
   */
  SETTING_UP = 2,

  /**
   * @generated from enum value: VESPA_DATABASE_STACK_STATUS_ACTIVE = 3;
   */
  ACTIVE = 3,

  /**
   * @generated from enum value: VESPA_DATABASE_STACK_STATUS_DEGRADED = 4;
   */
  DEGRADED = 4,

  /**
   * @generated from enum value: VESPA_DATABASE_STACK_STATUS_INACTIVE = 5;
   */
  INACTIVE = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(VespaDatabaseStackStatus)
proto3.util.setEnumType(VespaDatabaseStackStatus, "beekeeper.v1.VespaDatabaseStackStatus", [
  { no: 0, name: "VESPA_DATABASE_STACK_STATUS_UNSPECIFIED" },
  { no: 1, name: "VESPA_DATABASE_STACK_STATUS_SUBMITTED" },
  { no: 2, name: "VESPA_DATABASE_STACK_STATUS_SETTING_UP" },
  { no: 3, name: "VESPA_DATABASE_STACK_STATUS_ACTIVE" },
  { no: 4, name: "VESPA_DATABASE_STACK_STATUS_DEGRADED" },
  { no: 5, name: "VESPA_DATABASE_STACK_STATUS_INACTIVE" },
]);

/**
 * *
 * This is the status of the Database in the Vespa cluster. It can be either:
 *
 * - Queued: This is set by the orchestrator when a new database is created but
 * not yet assigned to a node
 * - Initializing: This is set by the node when it has accepted the database and
 * is initializing the database
 * - Booting: This is set by the node when the database is booting up, this is a
 * temporary status and it happens when the node is starting up and has not yet
 * received instrctions from the orchestrator
 * - Ready: This is set by the node when the database is ready to be used and it
 * can be advitised to the clients
 * - Unreacheable: This is set by the orchestrator when the node is not
 * reachable
 * - Synching: This is set by the node when the database is synching with the
 * primary database or another secondary database
 * - Failed: This is set by the orchestrator when the database has been
 * unreachable for a long time and the node is considered dead
 *
 * @generated from enum beekeeper.v1.VespaDatabaseStatusAtOrchestrator
 */
export enum VespaDatabaseStatusAtOrchestrator {
  /**
   * @generated from enum value: VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_QUEUED_FOR_HUB_ASSIGNMENT = 1;
   */
  QUEUED_FOR_HUB_ASSIGNMENT = 1,

  /**
   * @generated from enum value: VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_QUEUED_FOR_NODE_ASSIGNMENT = 2;
   */
  QUEUED_FOR_NODE_ASSIGNMENT = 2,

  /**
   * @generated from enum value: VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_READY = 3;
   */
  READY = 3,

  /**
   * @generated from enum value: VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_UNREACHEABLE = 4;
   */
  UNREACHEABLE = 4,

  /**
   * @generated from enum value: VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_FAILED = 5;
   */
  FAILED = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(VespaDatabaseStatusAtOrchestrator)
proto3.util.setEnumType(VespaDatabaseStatusAtOrchestrator, "beekeeper.v1.VespaDatabaseStatusAtOrchestrator", [
  { no: 0, name: "VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_UNSPECIFIED" },
  { no: 1, name: "VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_QUEUED_FOR_HUB_ASSIGNMENT" },
  { no: 2, name: "VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_QUEUED_FOR_NODE_ASSIGNMENT" },
  { no: 3, name: "VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_READY" },
  { no: 4, name: "VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_UNREACHEABLE" },
  { no: 5, name: "VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_FAILED" },
]);

/**
 * *
 * These models define how nodes in the Vespa cluster are stored in the database
 * as follows:
 * - A database can be assigned to multiple nodes but only one primary and many
 * secondary nodes
 * - A node will send a heartbeat RPC every 10 seconds to indicate that it is
 * still alive
 * - If a node does not send a heartbeat for 30 seconds, it is considered dead
 * and the database is reassigned to another node
 *
 * @generated from enum beekeeper.v1.VespaNodeStatus
 */
export enum VespaNodeStatus {
  /**
   * @generated from enum value: VESPA_NODE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: VESPA_NODE_STATUS_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: VESPA_NODE_STATUS_UNREACHEABLE = 2;
   */
  UNREACHEABLE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(VespaNodeStatus)
proto3.util.setEnumType(VespaNodeStatus, "beekeeper.v1.VespaNodeStatus", [
  { no: 0, name: "VESPA_NODE_STATUS_UNSPECIFIED" },
  { no: 1, name: "VESPA_NODE_STATUS_ACTIVE" },
  { no: 2, name: "VESPA_NODE_STATUS_UNREACHEABLE" },
]);

/**
 * @generated from extension: string vespa_database_stack_status = 2000000;
 */
export const vespa_database_stack_status = proto3.makeExtension<EnumValueOptions, string>(
  "beekeeper.v1.vespa_database_stack_status", 
  EnumValueOptions, 
  { no: 2000000, kind: "scalar", T: 9 /* ScalarType.STRING */ },
);

/**
 * @generated from extension: string vespa_database_status_at_orchestrator = 2000001;
 */
export const vespa_database_status_at_orchestrator = proto3.makeExtension<EnumValueOptions, string>(
  "beekeeper.v1.vespa_database_status_at_orchestrator", 
  EnumValueOptions, 
  { no: 2000001, kind: "scalar", T: 9 /* ScalarType.STRING */ },
);

/**
 * @generated from extension: string vespa_node_status = 2000002;
 */
export const vespa_node_status = proto3.makeExtension<EnumValueOptions, string>(
  "beekeeper.v1.vespa_node_status", 
  EnumValueOptions, 
  { no: 2000002, kind: "scalar", T: 9 /* ScalarType.STRING */ },
);

