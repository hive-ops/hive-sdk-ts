// @generated by protoc-gen-es v2.6.3 with parameter "target=ts"
// @generated from file beekeeper/v1/enums.proto (package beekeeper.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenExtension, GenFile } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, extDesc, fileDesc } from "@bufbuild/protobuf/codegenv2";
import type { EnumValueOptions } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_descriptor } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file beekeeper/v1/enums.proto.
 */
export const file_beekeeper_v1_enums: GenFile = /*@__PURE__*/
  fileDesc("ChhiZWVrZWVwZXIvdjEvZW51bXMucHJvdG8SDGJlZWtlZXBlci52MSr5AgoYVmVzcGFEYXRhYmFzZVN0YWNrU3RhdHVzEj0KJ1ZFU1BBX0RBVEFCQVNFX1NUQUNLX1NUQVRVU19VTlNQRUNJRklFRBAAGhCCyNAHC1VOU1BFQ0lGSUVEEjkKJVZFU1BBX0RBVEFCQVNFX1NUQUNLX1NUQVRVU19TVUJNSVRURUQQARoOgsjQBwlzdWJtaXR0ZWQSOwomVkVTUEFfREFUQUJBU0VfU1RBQ0tfU1RBVFVTX1NFVFRJTkdfVVAQAhoPgsjQBwpzZXR0aW5nIHVwEjQKIlZFU1BBX0RBVEFCQVNFX1NUQUNLX1NUQVRVU19BQ1RJVkUQAxoMgsjQBwdoZWFsdGh5EjcKJFZFU1BBX0RBVEFCQVNFX1NUQUNLX1NUQVRVU19ERUdSQURFRBAEGg2CyNAHCGRlZ3JhZGVkEjcKJFZFU1BBX0RBVEFCQVNFX1NUQUNLX1NUQVRVU19JTkFDVElWRRAFGg2CyNAHCGluYWN0aXZlKv8DCiFWZXNwYURhdGFiYXNlU3RhdHVzQXRPcmNoZXN0cmF0b3ISRwoxVkVTUEFfREFUQUJBU0VfU1RBVFVTX0FUX09SQ0hFU1RSQVRPUl9VTlNQRUNJRklFRBAAGhCKyNAHC1VOU1BFQ0lGSUVEEmMKP1ZFU1BBX0RBVEFCQVNFX1NUQVRVU19BVF9PUkNIRVNUUkFUT1JfUVVFVUVEX0ZPUl9IVUJfQVNTSUdOTUVOVBABGh6KyNAHGXF1ZXVlZCBmb3IgaHViIGFzc2lnbm1lbnQSZQpAVkVTUEFfREFUQUJBU0VfU1RBVFVTX0FUX09SQ0hFU1RSQVRPUl9RVUVVRURfRk9SX05PREVfQVNTSUdOTUVOVBACGh+KyNAHGnF1ZXVlZCBmb3Igbm9kZSBhc3NpZ25tZW50EjsKK1ZFU1BBX0RBVEFCQVNFX1NUQVRVU19BVF9PUkNIRVNUUkFUT1JfUkVBRFkQAxoKisjQBwVyZWFkeRJJCjJWRVNQQV9EQVRBQkFTRV9TVEFUVVNfQVRfT1JDSEVTVFJBVE9SX1VOUkVBQ0hFQUJMRRAEGhGKyNAHDHVucmVhY2hlYWJsZRI9CixWRVNQQV9EQVRBQkFTRV9TVEFUVVNfQVRfT1JDSEVTVFJBVE9SX0ZBSUxFRBAFGguKyNAHBmZhaWxlZCqoAQoPVmVzcGFOb2RlU3RhdHVzEjMKHVZFU1BBX05PREVfU1RBVFVTX1VOU1BFQ0lGSUVEEAAaEJLI0AcLVU5TUEVDSUZJRUQSKQoYVkVTUEFfTk9ERV9TVEFUVVNfQUNUSVZFEAEaC5LI0AcGYWN0aXZlEjUKHlZFU1BBX05PREVfU1RBVFVTX1VOUkVBQ0hFQUJMRRACGhGSyNAHDHVucmVhY2hlYWJsZSrdAQoRVmVzcGFEYXRhYmFzZVJvbGUSNQofVkVTUEFfREFUQUJBU0VfUk9MRV9VTlNQRUNJRklFRBAAGhCayNAHC1VOU1BFQ0lGSUVEEi0KG1ZFU1BBX0RBVEFCQVNFX1JPTEVfUFJJTUFSWRABGgyayNAHB3ByaW1hcnkSMQodVkVTUEFfREFUQUJBU0VfUk9MRV9TRUNPTkRBUlkQAhoOmsjQBwlzZWNvbmRhcnkSLwocVkVTUEFfREFUQUJBU0VfUk9MRV9URVJUSUFSWRADGg2ayNAHCHRlcnRpYXJ5OmIKG3Zlc3BhX2RhdGFiYXNlX3N0YWNrX3N0YXR1cxIhLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zGICJeiABKAlSGHZlc3BhRGF0YWJhc2VTdGFja1N0YXR1czp1CiV2ZXNwYV9kYXRhYmFzZV9zdGF0dXNfYXRfb3JjaGVzdHJhdG9yEiEuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZU9wdGlvbnMYgYl6IAEoCVIhdmVzcGFEYXRhYmFzZVN0YXR1c0F0T3JjaGVzdHJhdG9yOk8KEXZlc3BhX25vZGVfc3RhdHVzEiEuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZU9wdGlvbnMYgol6IAEoCVIPdmVzcGFOb2RlU3RhdHVzOlMKE3Zlc3BhX2RhdGFiYXNlX3JvbGUSIS5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlT3B0aW9ucxiDiXogASgJUhF2ZXNwYURhdGFiYXNlUm9sZUKyAQoQY29tLmJlZWtlZXBlci52MUIKRW51bXNQcm90b1ABWkFnaXRodWIuY29tL2hpdmUtb3BzL2hpdmUtc2RrLWdvL3BrZ3MvZ2VuL2JlZWtlZXBlci92MTtiZWVrZWVwZXJ2MaICA0JYWKoCDEJlZWtlZXBlci5WMcoCDEJlZWtlZXBlclxWMeICGEJlZWtlZXBlclxWMVxHUEJNZXRhZGF0YeoCDUJlZWtlZXBlcjo6VjFiBnByb3RvMw", [file_google_protobuf_descriptor]);

/**
 * *
 * This is the status of the Database Stack in the Vespa cluster. It can be
 * either:
 *
 * - Submitted: This is set by the orchestrator when a new database stack is
 * created but not yet assigned to a node
 * - Setting Up: This is set by the node when it has accepted the database stack
 * and is setting up the database stack
 * - Healthy: This is set by the node when the database stack is healthy and
 * ready to be used
 * - Degraded: This is set by the orchestrator when the node is not reachable
 * - Inactive: This is set by the orchestrator when the database stack is not
 * reachable
 *
 * @generated from enum beekeeper.v1.VespaDatabaseStackStatus
 */
export enum VespaDatabaseStackStatus {
  /**
   * @generated from enum value: VESPA_DATABASE_STACK_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: VESPA_DATABASE_STACK_STATUS_SUBMITTED = 1;
   */
  SUBMITTED = 1,

  /**
   * @generated from enum value: VESPA_DATABASE_STACK_STATUS_SETTING_UP = 2;
   */
  SETTING_UP = 2,

  /**
   * @generated from enum value: VESPA_DATABASE_STACK_STATUS_ACTIVE = 3;
   */
  ACTIVE = 3,

  /**
   * @generated from enum value: VESPA_DATABASE_STACK_STATUS_DEGRADED = 4;
   */
  DEGRADED = 4,

  /**
   * @generated from enum value: VESPA_DATABASE_STACK_STATUS_INACTIVE = 5;
   */
  INACTIVE = 5,
}

/**
 * Describes the enum beekeeper.v1.VespaDatabaseStackStatus.
 */
export const VespaDatabaseStackStatusSchema: GenEnum<VespaDatabaseStackStatus> = /*@__PURE__*/
  enumDesc(file_beekeeper_v1_enums, 0);

/**
 * *
 * This is the status of the Database in the Vespa cluster. It can be either:
 *
 * - Queued: This is set by the orchestrator when a new database is created but
 * not yet assigned to a node
 * - Initializing: This is set by the node when it has accepted the database and
 * is initializing the database
 * - Booting: This is set by the node when the database is booting up, this is a
 * temporary status and it happens when the node is starting up and has not yet
 * received instrctions from the orchestrator
 * - Ready: This is set by the node when the database is ready to be used and it
 * can be advitised to the clients
 * - Unreacheable: This is set by the orchestrator when the node is not
 * reachable
 * - Synching: This is set by the node when the database is synching with the
 * primary database or another secondary database
 * - Failed: This is set by the orchestrator when the database has been
 * unreachable for a long time and the node is considered dead
 *
 * @generated from enum beekeeper.v1.VespaDatabaseStatusAtOrchestrator
 */
export enum VespaDatabaseStatusAtOrchestrator {
  /**
   * @generated from enum value: VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_QUEUED_FOR_HUB_ASSIGNMENT = 1;
   */
  QUEUED_FOR_HUB_ASSIGNMENT = 1,

  /**
   * @generated from enum value: VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_QUEUED_FOR_NODE_ASSIGNMENT = 2;
   */
  QUEUED_FOR_NODE_ASSIGNMENT = 2,

  /**
   * @generated from enum value: VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_READY = 3;
   */
  READY = 3,

  /**
   * @generated from enum value: VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_UNREACHEABLE = 4;
   */
  UNREACHEABLE = 4,

  /**
   * @generated from enum value: VESPA_DATABASE_STATUS_AT_ORCHESTRATOR_FAILED = 5;
   */
  FAILED = 5,
}

/**
 * Describes the enum beekeeper.v1.VespaDatabaseStatusAtOrchestrator.
 */
export const VespaDatabaseStatusAtOrchestratorSchema: GenEnum<VespaDatabaseStatusAtOrchestrator> = /*@__PURE__*/
  enumDesc(file_beekeeper_v1_enums, 1);

/**
 * *
 * These models define how nodes in the Vespa cluster are stored in the database
 * as follows:
 * - A database can be assigned to multiple nodes but only one primary and many
 * secondary nodes
 * - A node will send a heartbeat RPC every 10 seconds to indicate that it is
 * still alive
 * - If a node does not send a heartbeat for 30 seconds, it is considered dead
 * and the database is reassigned to another node
 *
 * @generated from enum beekeeper.v1.VespaNodeStatus
 */
export enum VespaNodeStatus {
  /**
   * @generated from enum value: VESPA_NODE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: VESPA_NODE_STATUS_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: VESPA_NODE_STATUS_UNREACHEABLE = 2;
   */
  UNREACHEABLE = 2,
}

/**
 * Describes the enum beekeeper.v1.VespaNodeStatus.
 */
export const VespaNodeStatusSchema: GenEnum<VespaNodeStatus> = /*@__PURE__*/
  enumDesc(file_beekeeper_v1_enums, 2);

/**
 * @generated from enum beekeeper.v1.VespaDatabaseRole
 */
export enum VespaDatabaseRole {
  /**
   * @generated from enum value: VESPA_DATABASE_ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: VESPA_DATABASE_ROLE_PRIMARY = 1;
   */
  PRIMARY = 1,

  /**
   * @generated from enum value: VESPA_DATABASE_ROLE_SECONDARY = 2;
   */
  SECONDARY = 2,

  /**
   * @generated from enum value: VESPA_DATABASE_ROLE_TERTIARY = 3;
   */
  TERTIARY = 3,
}

/**
 * Describes the enum beekeeper.v1.VespaDatabaseRole.
 */
export const VespaDatabaseRoleSchema: GenEnum<VespaDatabaseRole> = /*@__PURE__*/
  enumDesc(file_beekeeper_v1_enums, 3);

/**
 * @generated from extension: string vespa_database_stack_status = 2000000;
 */
export const vespa_database_stack_status: GenExtension<EnumValueOptions, string> = /*@__PURE__*/
  extDesc(file_beekeeper_v1_enums, 0);

/**
 * @generated from extension: string vespa_database_status_at_orchestrator = 2000001;
 */
export const vespa_database_status_at_orchestrator: GenExtension<EnumValueOptions, string> = /*@__PURE__*/
  extDesc(file_beekeeper_v1_enums, 1);

/**
 * @generated from extension: string vespa_node_status = 2000002;
 */
export const vespa_node_status: GenExtension<EnumValueOptions, string> = /*@__PURE__*/
  extDesc(file_beekeeper_v1_enums, 2);

/**
 * @generated from extension: string vespa_database_role = 2000003;
 */
export const vespa_database_role: GenExtension<EnumValueOptions, string> = /*@__PURE__*/
  extDesc(file_beekeeper_v1_enums, 3);

