// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file beekeeper/v1/database.proto (package beekeeper.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { DatabaseSchema, VespaNode } from "../../vespa/v1/schema_models_pb";
import { VespaDatabaseStackStatus, VespaDatabaseStatusAtOrchestrator } from "./enums_pb";
import { VespaDatabaseStatusAtNode } from "../../vespa/v1/enums_pb";
import { ResponseMetadata } from "../../hive/v1/models_pb";

/**
 * @generated from message beekeeper.v1.VespaDatabaseStack
 */
export class VespaDatabaseStack extends Message<VespaDatabaseStack> {
  /**
   * @generated from field: string hrn = 1;
   */
  hrn = "";

  /**
   * @generated from field: string organization_uuid = 2;
   */
  organizationUuid = "";

  /**
   * @generated from field: string project_uuid = 3;
   */
  projectUuid = "";

  /**
   * @generated from field: string uuid = 4;
   */
  uuid = "";

  /**
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * @generated from field: uint32 replication_factor = 6;
   */
  replicationFactor = 0;

  /**
   * @generated from field: vespa.v1.DatabaseSchema schema = 7;
   */
  schema?: DatabaseSchema;

  /**
   * @generated from field: beekeeper.v1.VespaDatabaseStackStatus status = 8;
   */
  status = VespaDatabaseStackStatus.UNSPECIFIED;

  /**
   * @generated from field: string status_text = 9;
   */
  statusText = "";

  /**
   * @generated from field: repeated beekeeper.v1.VespaDatabase databases = 10;
   */
  databases: VespaDatabase[] = [];

  /**
   * @generated from field: repeated string country_codes = 11;
   */
  countryCodes: string[] = [];

  constructor(data?: PartialMessage<VespaDatabaseStack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.VespaDatabaseStack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hrn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "replication_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "schema", kind: "message", T: DatabaseSchema },
    { no: 8, name: "status", kind: "enum", T: proto3.getEnumType(VespaDatabaseStackStatus) },
    { no: 9, name: "status_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "databases", kind: "message", T: VespaDatabase, repeated: true },
    { no: 11, name: "country_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VespaDatabaseStack {
    return new VespaDatabaseStack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VespaDatabaseStack {
    return new VespaDatabaseStack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VespaDatabaseStack {
    return new VespaDatabaseStack().fromJsonString(jsonString, options);
  }

  static equals(a: VespaDatabaseStack | PlainMessage<VespaDatabaseStack> | undefined, b: VespaDatabaseStack | PlainMessage<VespaDatabaseStack> | undefined): boolean {
    return proto3.util.equals(VespaDatabaseStack, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.VespaDatabase
 */
export class VespaDatabase extends Message<VespaDatabase> {
  /**
   * @generated from field: string hrn = 1;
   */
  hrn = "";

  /**
   * @generated from field: string organization_uuid = 2;
   */
  organizationUuid = "";

  /**
   * @generated from field: string project_uuid = 3;
   */
  projectUuid = "";

  /**
   * @generated from field: string stack_uuid = 4;
   */
  stackUuid = "";

  /**
   * @generated from field: string uuid = 5;
   */
  uuid = "";

  /**
   * @generated from field: string name = 6;
   */
  name = "";

  /**
   * @generated from field: vespa.v1.VespaNode node = 7;
   */
  node?: VespaNode;

  /**
   * @generated from field: beekeeper.v1.VespaDatabaseStatusAtOrchestrator status_at_orchestrator = 8;
   */
  statusAtOrchestrator = VespaDatabaseStatusAtOrchestrator.UNSPECIFIED;

  /**
   * @generated from field: string status_at_orchestrator_text = 9;
   */
  statusAtOrchestratorText = "";

  /**
   * @generated from field: vespa.v1.VespaDatabaseStatusAtNode status_at_node = 10;
   */
  statusAtNode = VespaDatabaseStatusAtNode.UNSPECIFIED;

  /**
   * @generated from field: string status_at_node_text = 11;
   */
  statusAtNodeText = "";

  /**
   * Each change to the database schema will increment this index
   *
   * @generated from field: uint64 schema_log_index = 12;
   */
  schemaLogIndex = protoInt64.zero;

  /**
   * @generated from field: repeated string primary_partitions = 13;
   */
  primaryPartitions: string[] = [];

  /**
   * @generated from field: repeated string secondary_partitions = 14;
   */
  secondaryPartitions: string[] = [];

  constructor(data?: PartialMessage<VespaDatabase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.VespaDatabase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hrn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "stack_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "node", kind: "message", T: VespaNode },
    { no: 8, name: "status_at_orchestrator", kind: "enum", T: proto3.getEnumType(VespaDatabaseStatusAtOrchestrator) },
    { no: 9, name: "status_at_orchestrator_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status_at_node", kind: "enum", T: proto3.getEnumType(VespaDatabaseStatusAtNode) },
    { no: 11, name: "status_at_node_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "schema_log_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "primary_partitions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 14, name: "secondary_partitions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VespaDatabase {
    return new VespaDatabase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VespaDatabase {
    return new VespaDatabase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VespaDatabase {
    return new VespaDatabase().fromJsonString(jsonString, options);
  }

  static equals(a: VespaDatabase | PlainMessage<VespaDatabase> | undefined, b: VespaDatabase | PlainMessage<VespaDatabase> | undefined): boolean {
    return proto3.util.equals(VespaDatabase, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.GetVespaDatabaseStackRequest
 */
export class GetVespaDatabaseStackRequest extends Message<GetVespaDatabaseStackRequest> {
  /**
   * @generated from field: string hrn = 1;
   */
  hrn = "";

  constructor(data?: PartialMessage<GetVespaDatabaseStackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.GetVespaDatabaseStackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hrn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVespaDatabaseStackRequest {
    return new GetVespaDatabaseStackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVespaDatabaseStackRequest {
    return new GetVespaDatabaseStackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVespaDatabaseStackRequest {
    return new GetVespaDatabaseStackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVespaDatabaseStackRequest | PlainMessage<GetVespaDatabaseStackRequest> | undefined, b: GetVespaDatabaseStackRequest | PlainMessage<GetVespaDatabaseStackRequest> | undefined): boolean {
    return proto3.util.equals(GetVespaDatabaseStackRequest, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.GetVespaDatabaseStackResponse
 */
export class GetVespaDatabaseStackResponse extends Message<GetVespaDatabaseStackResponse> {
  /**
   * @generated from field: hive.v1.ResponseMetadata metadata = 1;
   */
  metadata?: ResponseMetadata;

  /**
   * @generated from field: beekeeper.v1.VespaDatabaseStack stack = 2;
   */
  stack?: VespaDatabaseStack;

  constructor(data?: PartialMessage<GetVespaDatabaseStackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.GetVespaDatabaseStackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ResponseMetadata },
    { no: 2, name: "stack", kind: "message", T: VespaDatabaseStack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVespaDatabaseStackResponse {
    return new GetVespaDatabaseStackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVespaDatabaseStackResponse {
    return new GetVespaDatabaseStackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVespaDatabaseStackResponse {
    return new GetVespaDatabaseStackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVespaDatabaseStackResponse | PlainMessage<GetVespaDatabaseStackResponse> | undefined, b: GetVespaDatabaseStackResponse | PlainMessage<GetVespaDatabaseStackResponse> | undefined): boolean {
    return proto3.util.equals(GetVespaDatabaseStackResponse, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.GetVespaDatabaseRequest
 */
export class GetVespaDatabaseRequest extends Message<GetVespaDatabaseRequest> {
  /**
   * @generated from field: string hrn = 1;
   */
  hrn = "";

  constructor(data?: PartialMessage<GetVespaDatabaseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.GetVespaDatabaseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hrn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVespaDatabaseRequest {
    return new GetVespaDatabaseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVespaDatabaseRequest {
    return new GetVespaDatabaseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVespaDatabaseRequest {
    return new GetVespaDatabaseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVespaDatabaseRequest | PlainMessage<GetVespaDatabaseRequest> | undefined, b: GetVespaDatabaseRequest | PlainMessage<GetVespaDatabaseRequest> | undefined): boolean {
    return proto3.util.equals(GetVespaDatabaseRequest, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.GetVespaDatabaseResponse
 */
export class GetVespaDatabaseResponse extends Message<GetVespaDatabaseResponse> {
  /**
   * @generated from field: hive.v1.ResponseMetadata metadata = 1;
   */
  metadata?: ResponseMetadata;

  /**
   * @generated from field: beekeeper.v1.VespaDatabase database = 2;
   */
  database?: VespaDatabase;

  constructor(data?: PartialMessage<GetVespaDatabaseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.GetVespaDatabaseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ResponseMetadata },
    { no: 2, name: "database", kind: "message", T: VespaDatabase },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVespaDatabaseResponse {
    return new GetVespaDatabaseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVespaDatabaseResponse {
    return new GetVespaDatabaseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVespaDatabaseResponse {
    return new GetVespaDatabaseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVespaDatabaseResponse | PlainMessage<GetVespaDatabaseResponse> | undefined, b: GetVespaDatabaseResponse | PlainMessage<GetVespaDatabaseResponse> | undefined): boolean {
    return proto3.util.equals(GetVespaDatabaseResponse, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.DeleteVespaDatabaseStackRequest
 */
export class DeleteVespaDatabaseStackRequest extends Message<DeleteVespaDatabaseStackRequest> {
  /**
   * @generated from field: string hrn = 1;
   */
  hrn = "";

  constructor(data?: PartialMessage<DeleteVespaDatabaseStackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.DeleteVespaDatabaseStackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hrn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteVespaDatabaseStackRequest {
    return new DeleteVespaDatabaseStackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteVespaDatabaseStackRequest {
    return new DeleteVespaDatabaseStackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteVespaDatabaseStackRequest {
    return new DeleteVespaDatabaseStackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteVespaDatabaseStackRequest | PlainMessage<DeleteVespaDatabaseStackRequest> | undefined, b: DeleteVespaDatabaseStackRequest | PlainMessage<DeleteVespaDatabaseStackRequest> | undefined): boolean {
    return proto3.util.equals(DeleteVespaDatabaseStackRequest, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.DeleteVespaDatabaseStackResponse
 */
export class DeleteVespaDatabaseStackResponse extends Message<DeleteVespaDatabaseStackResponse> {
  /**
   * @generated from field: hive.v1.ResponseMetadata metadata = 1;
   */
  metadata?: ResponseMetadata;

  constructor(data?: PartialMessage<DeleteVespaDatabaseStackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.DeleteVespaDatabaseStackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ResponseMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteVespaDatabaseStackResponse {
    return new DeleteVespaDatabaseStackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteVespaDatabaseStackResponse {
    return new DeleteVespaDatabaseStackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteVespaDatabaseStackResponse {
    return new DeleteVespaDatabaseStackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteVespaDatabaseStackResponse | PlainMessage<DeleteVespaDatabaseStackResponse> | undefined, b: DeleteVespaDatabaseStackResponse | PlainMessage<DeleteVespaDatabaseStackResponse> | undefined): boolean {
    return proto3.util.equals(DeleteVespaDatabaseStackResponse, a, b);
  }
}

