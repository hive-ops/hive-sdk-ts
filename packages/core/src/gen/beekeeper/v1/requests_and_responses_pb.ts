// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file beekeeper/v1/requests_and_responses.proto (package beekeeper.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CountryCode } from "../../hive/v1/enums_pb";
import { Country, ResponseMetadata } from "../../hive/v1/models_pb";
import { VespaDatabaseStack } from "./database_pb";

/**
 * @generated from message beekeeper.v1.CreateVespaDatabaseStackRequest
 */
export class CreateVespaDatabaseStackRequest extends Message<CreateVespaDatabaseStackRequest> {
  /**
   * @generated from field: string organization_uuid = 1;
   */
  organizationUuid = "";

  /**
   * @generated from field: string project_uuid = 2;
   */
  projectUuid = "";

  /**
   * @generated from field: string stack_name = 3;
   */
  stackName = "";

  /**
   * @generated from field: hive.v1.CountryCode country_code = 4;
   */
  countryCode = CountryCode.UNSPECIFIED;

  /**
   * @generated from field: uint32 replication_factor = 5;
   */
  replicationFactor = 0;

  constructor(data?: PartialMessage<CreateVespaDatabaseStackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.CreateVespaDatabaseStackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "stack_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "country_code", kind: "enum", T: proto3.getEnumType(CountryCode) },
    { no: 5, name: "replication_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateVespaDatabaseStackRequest {
    return new CreateVespaDatabaseStackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateVespaDatabaseStackRequest {
    return new CreateVespaDatabaseStackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateVespaDatabaseStackRequest {
    return new CreateVespaDatabaseStackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateVespaDatabaseStackRequest | PlainMessage<CreateVespaDatabaseStackRequest> | undefined, b: CreateVespaDatabaseStackRequest | PlainMessage<CreateVespaDatabaseStackRequest> | undefined): boolean {
    return proto3.util.equals(CreateVespaDatabaseStackRequest, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.CreateVespaDatabaseStackResponse
 */
export class CreateVespaDatabaseStackResponse extends Message<CreateVespaDatabaseStackResponse> {
  /**
   * @generated from field: hive.v1.ResponseMetadata metadata = 1;
   */
  metadata?: ResponseMetadata;

  /**
   * @generated from field: beekeeper.v1.VespaDatabaseStack stack = 2;
   */
  stack?: VespaDatabaseStack;

  constructor(data?: PartialMessage<CreateVespaDatabaseStackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.CreateVespaDatabaseStackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ResponseMetadata },
    { no: 2, name: "stack", kind: "message", T: VespaDatabaseStack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateVespaDatabaseStackResponse {
    return new CreateVespaDatabaseStackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateVespaDatabaseStackResponse {
    return new CreateVespaDatabaseStackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateVespaDatabaseStackResponse {
    return new CreateVespaDatabaseStackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateVespaDatabaseStackResponse | PlainMessage<CreateVespaDatabaseStackResponse> | undefined, b: CreateVespaDatabaseStackResponse | PlainMessage<CreateVespaDatabaseStackResponse> | undefined): boolean {
    return proto3.util.equals(CreateVespaDatabaseStackResponse, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.RenameVespaDatabaseStackRequest
 */
export class RenameVespaDatabaseStackRequest extends Message<RenameVespaDatabaseStackRequest> {
  /**
   * @generated from field: string hrn = 1;
   */
  hrn = "";

  /**
   * @generated from field: string new_stack_name = 2;
   */
  newStackName = "";

  constructor(data?: PartialMessage<RenameVespaDatabaseStackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.RenameVespaDatabaseStackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hrn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_stack_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameVespaDatabaseStackRequest {
    return new RenameVespaDatabaseStackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameVespaDatabaseStackRequest {
    return new RenameVespaDatabaseStackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameVespaDatabaseStackRequest {
    return new RenameVespaDatabaseStackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenameVespaDatabaseStackRequest | PlainMessage<RenameVespaDatabaseStackRequest> | undefined, b: RenameVespaDatabaseStackRequest | PlainMessage<RenameVespaDatabaseStackRequest> | undefined): boolean {
    return proto3.util.equals(RenameVespaDatabaseStackRequest, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.RenameVespaDatabaseStackResponse
 */
export class RenameVespaDatabaseStackResponse extends Message<RenameVespaDatabaseStackResponse> {
  /**
   * @generated from field: hive.v1.ResponseMetadata metadata = 1;
   */
  metadata?: ResponseMetadata;

  /**
   * @generated from field: beekeeper.v1.VespaDatabaseStack stack = 2;
   */
  stack?: VespaDatabaseStack;

  constructor(data?: PartialMessage<RenameVespaDatabaseStackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.RenameVespaDatabaseStackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ResponseMetadata },
    { no: 2, name: "stack", kind: "message", T: VespaDatabaseStack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameVespaDatabaseStackResponse {
    return new RenameVespaDatabaseStackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameVespaDatabaseStackResponse {
    return new RenameVespaDatabaseStackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameVespaDatabaseStackResponse {
    return new RenameVespaDatabaseStackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenameVespaDatabaseStackResponse | PlainMessage<RenameVespaDatabaseStackResponse> | undefined, b: RenameVespaDatabaseStackResponse | PlainMessage<RenameVespaDatabaseStackResponse> | undefined): boolean {
    return proto3.util.equals(RenameVespaDatabaseStackResponse, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.DeleteVespaDatabaseStackRequest
 */
export class DeleteVespaDatabaseStackRequest extends Message<DeleteVespaDatabaseStackRequest> {
  /**
   * @generated from field: string hrn = 1;
   */
  hrn = "";

  constructor(data?: PartialMessage<DeleteVespaDatabaseStackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.DeleteVespaDatabaseStackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hrn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteVespaDatabaseStackRequest {
    return new DeleteVespaDatabaseStackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteVespaDatabaseStackRequest {
    return new DeleteVespaDatabaseStackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteVespaDatabaseStackRequest {
    return new DeleteVespaDatabaseStackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteVespaDatabaseStackRequest | PlainMessage<DeleteVespaDatabaseStackRequest> | undefined, b: DeleteVespaDatabaseStackRequest | PlainMessage<DeleteVespaDatabaseStackRequest> | undefined): boolean {
    return proto3.util.equals(DeleteVespaDatabaseStackRequest, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.DeleteVespaDatabaseStackResponse
 */
export class DeleteVespaDatabaseStackResponse extends Message<DeleteVespaDatabaseStackResponse> {
  /**
   * @generated from field: hive.v1.ResponseMetadata metadata = 1;
   */
  metadata?: ResponseMetadata;

  /**
   * @generated from field: repeated beekeeper.v1.VespaDatabaseStack stacks = 2;
   */
  stacks: VespaDatabaseStack[] = [];

  constructor(data?: PartialMessage<DeleteVespaDatabaseStackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.DeleteVespaDatabaseStackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ResponseMetadata },
    { no: 2, name: "stacks", kind: "message", T: VespaDatabaseStack, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteVespaDatabaseStackResponse {
    return new DeleteVespaDatabaseStackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteVespaDatabaseStackResponse {
    return new DeleteVespaDatabaseStackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteVespaDatabaseStackResponse {
    return new DeleteVespaDatabaseStackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteVespaDatabaseStackResponse | PlainMessage<DeleteVespaDatabaseStackResponse> | undefined, b: DeleteVespaDatabaseStackResponse | PlainMessage<DeleteVespaDatabaseStackResponse> | undefined): boolean {
    return proto3.util.equals(DeleteVespaDatabaseStackResponse, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.GetSupportedCountriesRequest
 */
export class GetSupportedCountriesRequest extends Message<GetSupportedCountriesRequest> {
  constructor(data?: PartialMessage<GetSupportedCountriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.GetSupportedCountriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSupportedCountriesRequest {
    return new GetSupportedCountriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSupportedCountriesRequest {
    return new GetSupportedCountriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSupportedCountriesRequest {
    return new GetSupportedCountriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSupportedCountriesRequest | PlainMessage<GetSupportedCountriesRequest> | undefined, b: GetSupportedCountriesRequest | PlainMessage<GetSupportedCountriesRequest> | undefined): boolean {
    return proto3.util.equals(GetSupportedCountriesRequest, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.GetSupportedCountriesResponse
 */
export class GetSupportedCountriesResponse extends Message<GetSupportedCountriesResponse> {
  /**
   * @generated from field: repeated hive.v1.Country countries = 1;
   */
  countries: Country[] = [];

  constructor(data?: PartialMessage<GetSupportedCountriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.GetSupportedCountriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "countries", kind: "message", T: Country, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSupportedCountriesResponse {
    return new GetSupportedCountriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSupportedCountriesResponse {
    return new GetSupportedCountriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSupportedCountriesResponse {
    return new GetSupportedCountriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSupportedCountriesResponse | PlainMessage<GetSupportedCountriesResponse> | undefined, b: GetSupportedCountriesResponse | PlainMessage<GetSupportedCountriesResponse> | undefined): boolean {
    return proto3.util.equals(GetSupportedCountriesResponse, a, b);
  }
}

