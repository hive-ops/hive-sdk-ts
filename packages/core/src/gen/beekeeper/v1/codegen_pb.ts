// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file beekeeper/v1/codegen.proto (package beekeeper.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ProgrammingLanguage } from "../../hive/v1/enums_pb";
import { File, ResponseMetadata } from "../../hive/v1/models_pb";

/**
 * @generated from message beekeeper.v1.GenerateCodeRequest
 */
export class GenerateCodeRequest extends Message<GenerateCodeRequest> {
  /**
   * @generated from field: string stack_hrn = 1;
   */
  stackHrn = "";

  /**
   * @generated from field: hive.v1.ProgrammingLanguage language = 2;
   */
  language = ProgrammingLanguage.UNSPECIFIED;

  /**
   * @generated from field: repeated string output_dir_elements = 3;
   */
  outputDirElements: string[] = [];

  /**
   * @generated from field: repeated hive.v1.File schema_files = 4;
   */
  schemaFiles: File[] = [];

  constructor(data?: PartialMessage<GenerateCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.GenerateCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stack_hrn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language", kind: "enum", T: proto3.getEnumType(ProgrammingLanguage) },
    { no: 3, name: "output_dir_elements", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "schema_files", kind: "message", T: File, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateCodeRequest {
    return new GenerateCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateCodeRequest {
    return new GenerateCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateCodeRequest {
    return new GenerateCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateCodeRequest | PlainMessage<GenerateCodeRequest> | undefined, b: GenerateCodeRequest | PlainMessage<GenerateCodeRequest> | undefined): boolean {
    return proto3.util.equals(GenerateCodeRequest, a, b);
  }
}

/**
 * @generated from message beekeeper.v1.GenerateCodeResponse
 */
export class GenerateCodeResponse extends Message<GenerateCodeResponse> {
  /**
   * @generated from field: hive.v1.ResponseMetadata metadata = 1;
   */
  metadata?: ResponseMetadata;

  /**
   * @generated from field: hive.v1.ProgrammingLanguage language = 2;
   */
  language = ProgrammingLanguage.UNSPECIFIED;

  /**
   * @generated from field: repeated hive.v1.File code_files = 3;
   */
  codeFiles: File[] = [];

  constructor(data?: PartialMessage<GenerateCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beekeeper.v1.GenerateCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ResponseMetadata },
    { no: 2, name: "language", kind: "enum", T: proto3.getEnumType(ProgrammingLanguage) },
    { no: 3, name: "code_files", kind: "message", T: File, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateCodeResponse {
    return new GenerateCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateCodeResponse {
    return new GenerateCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateCodeResponse {
    return new GenerateCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateCodeResponse | PlainMessage<GenerateCodeResponse> | undefined, b: GenerateCodeResponse | PlainMessage<GenerateCodeResponse> | undefined): boolean {
    return proto3.util.equals(GenerateCodeResponse, a, b);
  }
}

