name: Version bump and tag workflow

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  commit-check:
    name: Get commit counts
    runs-on: ubuntu-latest
    outputs:
      root_commits: ${{ steps.commit-count.outputs.root }}
      core_commits: ${{ steps.commit-count.outputs.core }}
      node_commits: ${{ steps.commit-count.outputs.node }}
      cli_commits: ${{ steps.commit-count.outputs.cli }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all tags

      - name: Get latest repo tag
        id: get-tag
        run: |
          echo "tag=$(git describe --tags --abbrev=0 || echo '')" >> $GITHUB_OUTPUT

      - name: Get commit counts
        id: commit-count
        run: |
          TAG=${{ steps.get-tag.outputs.tag }}
          if [ -z "$TAG" ]; then TAG=""; fi
          echo "tag=$TAG"
          echo "root=$(git rev-list $TAG..HEAD -- . | wc -l)" >> $GITHUB_OUTPUT
          echo "core=$(git rev-list $TAG..HEAD -- packages/core | wc -l)" >> $GITHUB_OUTPUT
          echo "node=$(git rev-list $TAG..HEAD -- packages/node | wc -l)" >> $GITHUB_OUTPUT
          echo "cli=$(git rev-list $TAG..HEAD -- packages/cli | wc -l)" >> $GITHUB_OUTPUT

  setup-dependencies:
    name: Bump and Build TS SDKs
    needs: [commit-check]
    runs-on: ubuntu-latest
    if: needs.commit-check.outputs.root_commits != '0'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install npm dependencies
        run: npm ci

      - name: Build all packages
        run: npx lerna run build

  build-and-test-cli:
    name: Build and Test Core SDK
    needs: [setup-dependencies, commit-check]
    runs-on: ubuntu-latest
    if: needs.commit-check.outputs.cli_commits != '0'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Restore cached node modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install npm dependencies
        run: npm ci

      - name: Build all packages
        run: npx lerna run build

      - name: Bump version and build cli SDK
        run: |
          cd packages/cli
          npm version patch --no-git-tag-version
          npm run build

      - name: Upload CLI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-artifacts
          path: |
            packages/cli/lib
            packages/cli/package*.json
          retention-days: 1

  publish-and-tag:
    name: Publish and Tag
    needs: [setup-dependencies, commit-check, build-and-test-cli]
    runs-on: ubuntu-latest
    if: |
      always() && 
      (needs.commit-check.result == 'success' && needs.setup-dependencies.result == 'success' && needs.commit-check.outputs.root_commits != '0') &&
      (needs.build-and-test-cli.result == 'success' || needs.build-and-test-cli.result == 'skipped')
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: "Configure Git"
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions"
      
      - run: ls -la ./artifacts
      - run: ls -la ./artifacts/cli-artifacts

      - name: Apply changes to CLI
        if: needs.commit-check.outputs.cli_commits != '0'
        run: |
          mkdir -p ./packages/cli/lib
          cp -r ./artifacts/cli-artifacts/* ./packages/cli/lib
          cp -r ./artifacts/cli-artifacts/package*.json ./packages/cli/
          cd packages/cli
          npm publish --provenance --access public

      - name: "Get new repo version"
        run: |
          npm version patch --no-git-tag-version
          echo NEW_VERSION=$(node -p "require('./package.json').version") >> "$GITHUB_ENV"

      - name: "Bump Repo Tag"
        run: |
          git commit -am "[patch version] Version bump to v${{ env.NEW_VERSION }}"
          git tag -a v${{ env.NEW_VERSION }} -m "Version v${{ env.NEW_VERSION }}"
          git push origin v${{ env.NEW_VERSION }} --no-verify
          git push --no-verify
      
      # - name: Bump version and build Node SDK
      #   if: needs.commit-check.outputs.node_commits != '0'
      #   run: |
      #     cd packages/node
      #     npm version patch --no-git-tag-version
      #     npm run build
      #     echo NODE_CURRENT_VERSION=$(node -p "require('./package.json').version") >> "$GITHUB_ENV"

      # - name: Bump version and build CLI
      #   if: needs.commit-check.outputs.cli_commits != '0'
      #   run: |
      #     cd packages/cli
      #     npm version patch --no-git-tag-version
      #     npm run build
      #     echo CLI_CURRENT_VERSION=$(node -p "require('./package.json').version") >> "$GITHUB_ENV"

      # - name: "Configure Git"
      #   run: |
      #     git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
      #     git config --local user.name "github-actions"

      # - name: Publish Core SDK
      #   if: needs.commit-check.outputs.core_commits != '0'
      #   run: |
      #     cd packages/core
      #     npm publish --provenance --access public
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # - name: Publish Node SDK
      #   if: needs.commit-check.outputs.node_commits != '0'
      #   run: |
      #     cd packages/node
      #     npm publish --provenance --access public
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # - name: Publish CLI
      #   if: needs.commit-check.outputs.node_commits != '0'
      #   run: |
      #     cd packages/cli
      #     npm publish --provenance --access public
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # - name: "Commit Repo Changes"
      #   if: |
      #     needs.commit-check.outputs.core_commits != '0' || needs.commit-check.outputs.node_commits != '0' || needs.commit-check.outputs.cli_commits != '0'
      #   run: |
      #     git commit -am "chore: release main" --no-verify

      # - name: "Tag Repo - Core"
      #   if: needs.commit-check.outputs.core_commits != '0'
      #   run: |
      #     git tag -a core-v${{ env.CORE_CURRENT_VERSION }} -m "Version core-v${{ env.CORE_CURRENT_VERSION }}"
      #     git push origin core-v${{ env.CORE_CURRENT_VERSION }} --no-verify

      # - name: "Tag Repo - Node"
      #   if: needs.commit-check.outputs.node_commits != '0'
      #   run: |
      #     git tag -a node-v${{ env.NODE_CURRENT_VERSION }} -m "Version core-v${{ env.NODE_CURRENT_VERSION }}"
      #     git push origin node-v${{ env.NODE_CURRENT_VERSION }} --no-verify

      # - name: "Push Repo"
      #   if: needs.commit-check.outputs.root_commits != '0'
      #   run: |
      #     git push --no-verify
