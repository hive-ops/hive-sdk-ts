name: Tag and Publish workflow

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  commit-check:
    name: Get commit counts
    runs-on: ubuntu-latest
    outputs:
      root_commits: ${{ steps.commit-count.outputs.root }}
      core_commits: ${{ steps.commit-count.outputs.core }}
      node_commits: ${{ steps.commit-count.outputs.node }}
      cli_commits: ${{ steps.commit-count.outputs.cli }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all tags

      - name: Get latest repo tag
        id: get-tag
        run: |
          echo "tag=$(git describe --tags --abbrev=0 || echo '')" >> $GITHUB_OUTPUT

      - name: Get commit counts
        id: commit-count
        run: |
          TAG=${{ steps.get-tag.outputs.tag }}
          if [ -z "$TAG" ]; then TAG=""; fi
          echo "tag=$TAG"
          echo "root=$(git rev-list $TAG..HEAD -- . | wc -l)" >> $GITHUB_OUTPUT
          echo "core=$(git rev-list $TAG..HEAD -- packages/core | wc -l)" >> $GITHUB_OUTPUT
          echo "node=$(git rev-list $TAG..HEAD -- packages/node | wc -l)" >> $GITHUB_OUTPUT
          echo "cli=$(git rev-list $TAG..HEAD -- packages/cli | wc -l)" >> $GITHUB_OUTPUT

  setup-dependencies:
    name: Bump and Build TS SDKs
    needs: [commit-check]
    runs-on: ubuntu-latest
    if: needs.commit-check.outputs.root_commits != '0'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install npm dependencies
        run: npm ci

      - name: Build all packages
        run: npx lerna run build

  build-and-test-core:
    name: Build and Test Core SDK
    needs: [setup-dependencies, commit-check]
    runs-on: ubuntu-latest
    if: needs.commit-check.outputs.core_commits != '0'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Restore cached node modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install npm dependencies
        run: npm ci

      - name: Build all packages
        run: npx lerna run build

      - name: Bump version and build Core SDK
        run: |
          cd packages/core
          npm run build

      - name: Upload Core artifacts
        uses: actions/upload-artifact@v4
        with:
          name: core-artifacts
          path: |
            packages/core/lib
            packages/core/package*.json
          retention-days: 1

  # build-and-test-cli:
  #   name: Build and Test CLI SDK
  #   needs: [setup-dependencies, commit-check]
  #   runs-on: ubuntu-latest
  #   if: needs.commit-check.outputs.cli_commits != '0'
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v4

  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #         registry-url: "https://registry.npmjs.org"

  #     - name: Restore cached node modules
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           **/node_modules
  #         key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

  #     - name: Install npm dependencies
  #       run: npm ci

  #     - name: Build all packages
  #       run: npx lerna run build

  #     - name: Bump version and build CLI SDK
  #       run: |
  #         cd packages/cli
  #         npm run build

  #     - name: Upload CLI artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: cli-artifacts
  #         path: |
  #           packages/cli/lib
  #           packages/cli/package*.json
  #         retention-days: 1

  build-and-test-node:
    name: Build and Test Node SDK
    needs: [setup-dependencies, commit-check]
    runs-on: ubuntu-latest
    if: needs.commit-check.outputs.node_commits != '0'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Restore cached node modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install npm dependencies
        run: npm ci

      - name: Build all packages
        run: npx lerna run build

      - name: Bump version and build Node SDK
        run: |
          cd packages/node
          npm run build

      - name: Upload Node artifacts
        uses: actions/upload-artifact@v4
        with:
          name: node-artifacts
          path: |
            packages/node/lib
            packages/node/package*.json
          retention-days: 1

  publish-and-tag:
    name: Publish and Tag
    needs: [setup-dependencies, commit-check, build-and-test-core, build-and-test-node]
    runs-on: ubuntu-latest
    if: |
      always() && 
      (needs.commit-check.result == 'success' && needs.setup-dependencies.result == 'success' && needs.commit-check.outputs.root_commits != '0') &&
      (needs.build-and-test-core.result == 'success' || needs.build-and-test-core.result == 'skipped') &&
      (needs.build-and-test-node.result == 'success' || needs.build-and-test-node.result == 'skipped')
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: "Configure Git"
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions"

      - name: Apply changes to Core and publish
        if: needs.commit-check.outputs.core_commits != '0'
        run: |
          mkdir -p ./packages/core
          cp -r ./artifacts/core-artifacts/* ./packages/core
          cp -r ./artifacts/core-artifacts/package*.json ./packages/core/
          cd packages/core
          npm publish --provenance --access public
          git tag -a core-v$(node -p "require('./package.json').version") -m "@hiveops/core-v$(node -p "require('./package.json').version")"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # - name: Apply changes to CLI and publish
      #   if: needs.commit-check.outputs.cli_commits != '0'
      #   run: |
      #     mkdir -p ./packages/cli
      #     cp -r ./artifacts/cli-artifacts/* ./packages/cli
      #     cp -r ./artifacts/cli-artifacts/package*.json ./packages/cli/
      #     cd packages/cli
      #     npm publish --provenance --access public
      #     git tag -a cli-v$(node -p "require('./package.json').version") -m "@hiveops/cli-v$(node -p "require('./package.json').version")"
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Apply changes to Node and publish
        if: needs.commit-check.outputs.node_commits != '0'
        run: |
          mkdir -p ./packages/node
          cp -r ./artifacts/node-artifacts/* ./packages/node
          cp -r ./artifacts/node-artifacts/package*.json ./packages/node/
          cd packages/node
          npm publish --provenance --access public
          git tag -a node-v$(node -p "require('./package.json').version") -m "@hiveops/node-v$(node -p "require('./package.json').version")"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: "Bump Repo Tag"
        run: |
          git push origin --tags --no-verify
