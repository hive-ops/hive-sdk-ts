name: Build and Publish Packages

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  detect-changes:
    name: Detect changed packages
    runs-on: ubuntu-latest
    outputs:
      changed-packages: ${{ steps.changes.outputs.changed-packages }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Detect changed packages
        id: changes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Latest tag: $LATEST_TAG"

          # Read workspaces from package.json
          WORKSPACES=$(node -p "JSON.stringify(require('./package.json').workspaces || [])")
          echo "Workspaces: $WORKSPACES"

          CHANGED_PACKAGES="[]"
          HAS_CHANGES="false"

          # Check each workspace for changes
          for workspace in $(echo $WORKSPACES | jq -r '.[]'); do
            # Expand glob patterns
            for pkg_dir in $workspace; do
              if [ -f "$pkg_dir/package.json" ]; then
                PKG_NAME=$(node -p "require('./$pkg_dir/package.json').name")
                PKG_VERSION=$(node -p "require('./$pkg_dir/package.json').version")
                
                # Check if package has changes since last tag
                if [ -n "$LATEST_TAG" ]; then
                  CHANGES=$(git diff --name-only $LATEST_TAG..HEAD -- $pkg_dir/ | wc -l)
                else
                  CHANGES=1  # If no tags, consider everything changed
                fi
                
                if [ "$CHANGES" -gt 0 ]; then
                  echo "Package $PKG_NAME has changes"
                  
                  # Check if this version was already published
                  PUBLISHED_VERSION=$(npm view $PKG_NAME version 2>/dev/null || echo "0.0.0")
                  
                  if [ "$PKG_VERSION" != "$PUBLISHED_VERSION" ]; then
                    echo "Version changed: $PUBLISHED_VERSION -> $PKG_VERSION"
                    CHANGED_PACKAGES=$(echo $CHANGED_PACKAGES | jq --arg name "$PKG_NAME" --arg path "$pkg_dir" --arg version "$PKG_VERSION" '. + [{name: $name, path: $path, version: $version}]')
                    HAS_CHANGES="true"
                  else
                    echo "Version $PKG_VERSION already published, skipping"
                  fi
                fi
              fi
            done
          done

          # Compact JSON output (no newlines or spaces)
          CHANGED_PACKAGES_COMPACT=$(echo $CHANGED_PACKAGES | jq -c .)

          echo "changed-packages=$CHANGED_PACKAGES_COMPACT" >> $GITHUB_OUTPUT
          echo "has-changes=$HAS_CHANGES" >> $GITHUB_OUTPUT
          echo "Changed packages: $CHANGED_PACKAGES_COMPACT"

  build:
    name: Build packages
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build packages (respects dependency order)
        run: npx lerna run build --stream

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/lib/**
            packages/*/package.json
          retention-days: 1

  publish:
    name: Publish changed packages
    needs: [detect-changes, build]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true # Stop all if one fails
      matrix:
        package: ${{ fromJSON(needs.detect-changes.outputs.changed-packages) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Debug artifacts structure
        run: |
          echo "=== Artifacts structure ==="
          find . -name "lib" -type d 2>/dev/null || echo "No lib directories found"
          echo "=== All files ==="
          find . -name "*.js" -o -name "*.d.ts" | head -20
          echo "=== Package directory contents ==="
          ls -la ${{ matrix.package.path }}/ || echo "Package directory not found"
          echo "=== Current directory ==="
          pwd
          ls -la

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Publish package
        working-directory: ${{ matrix.package.path }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing ${{ matrix.package.name }}@${{ matrix.package.version }}"

          # Verify lib directory exists
          if [ ! -d "lib" ]; then
            echo "Error: lib directory not found for ${{ matrix.package.name }}"
            exit 1
          fi

          # Publish to npm
          # npm publish --provenance --access public

      # - name: Create and push tag
      #   working-directory: ${{ matrix.package.path }}
      #   run: |
      #     PKG_NAME_SHORT=$(echo "${{ matrix.package.name }}" | sed 's/@hiveops\///')
      #     TAG="${PKG_NAME_SHORT}-v${{ matrix.package.version }}"

      #     git tag -a "$TAG" -m "Release ${{ matrix.package.name }}@${{ matrix.package.version }}"
      #     git push origin "$TAG"
